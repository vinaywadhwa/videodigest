#!/usr/bin/env python

import argparse
import os
import pysrt
import re
import subprocess
import sys
import math

from moviepy.editor import VideoFileClip, TextClip, ImageClip, concatenate_videoclips

from sumy.parsers.plaintext import PlaintextParser
from sumy.nlp.tokenizers import Tokenizer
from sumy.nlp.stemmers import Stemmer
from sumy.utils import get_stop_words

from sumy.summarizers.luhn import LuhnSummarizer
from sumy.summarizers.edmundson import EdmundsonSummarizer
from sumy.summarizers.lsa import LsaSummarizer
from sumy.summarizers.text_rank import TextRankSummarizer
from sumy.summarizers.lex_rank import LexRankSummarizer

SUMMARIZERS = {
    'luhn': LuhnSummarizer,
    'edmundson': EdmundsonSummarizer,
    'lsa': LsaSummarizer,
    'text-rank': TextRankSummarizer,
    'lex-rank': LexRankSummarizer
}

def write_array_of_strings_to_file(array_of_strings, output_file):
    with open(plain_text_dst,'w') as output_file:
        for string_element in array_of_strings:
            output_file.write("%s\n" % string_element)

def create_summary(filename, regions):
    subclips = []
    input_video = VideoFileClip(filename)
    last_end = 0
    for (start, end) in regions:
        subclip = input_video.subclip(start, end)
        subclips.append(subclip)
        last_end = end
    return concatenate_videoclips(subclips)

def srt_item_to_range(item):
    start_s = item.start.hours*60*60 + item.start.minutes*60 + item.start.seconds + item.start.milliseconds/1000.
    end_s = item.end.hours*60*60 + item.end.minutes*60 + item.end.seconds + item.end.milliseconds/1000.
    return start_s, end_s

def srt_to_doc(srt_file):
    text = ''
    for index, item in enumerate(srt_file):
        if item.text.startswith("["): continue
        text += "(%d) " % index
        text += item.text.replace("\n", "").strip("...").replace(".", "").replace("?", "").replace("!", "")
        text += ". "
    return text

def total_duration_of_regions(regions):
    return sum(map(lambda (start, end): end-start, regions))

def summarize(srt_file, summarizer, n_sentences, language):
    parser = PlaintextParser.from_string(srt_to_doc(srt_file), Tokenizer(language))
    stemmer = Stemmer(language)
    summarizer = SUMMARIZERS[summarizer](stemmer)
    summarizer.stop_words = get_stop_words(language)
    srt_items = []
    plain_text_summary = []
    for sentence in summarizer(parser.document, n_sentences):
        index = int(re.findall("\(([0-9]+)\)", str(sentence))[0])
        plain_text_sentence = str(sentence).replace("(%d)"%index,"").strip()
        plain_text_summary.append(plain_text_sentence)
        item = srt_file[index]
        srt_items.append(srt_item_to_range(item))
    return srt_items,plain_text_summary

def find_summary_regions(srt_filename, summarizer="lsa", duration=30, language="english"):
    srt_file = pysrt.open(srt_filename)
    avg_subtitle_duration = total_duration_of_regions(map(srt_item_to_range, srt_file))/len(srt_file)
    n_sentences = duration / avg_subtitle_duration
    summary_srt_items,summary_plain_text = summarize(srt_file, summarizer, n_sentences, language)
    total_time = total_duration_of_regions(summary_srt_items)
    try_higher = total_time < duration
    if try_higher:
        while total_time < duration:
            n_sentences += 1
            summary_srt_items,summary_plain_text = summarize(srt_file, summarizer, n_sentences, language)
            total_time = total_duration_of_regions(summary_srt_items)
    else:
        while total_time > duration:
            n_sentences -= 1
            summary_srt_items,summary_plain_text = summarize(srt_file, summarizer, n_sentences, language)
            total_time = total_duration_of_regions(summary_srt_items)
    return summary_srt_items,summary_plain_text

if __name__ == '__main__':
    parser = argparse.ArgumentParser("videodigest: Automatic Video Summaries")
    parser.add_argument('-i', '--video-file', help="Input video file", required=True)
    parser.add_argument('-s', '--subtitles-file', help="Input subtitle file (srt)", required=True)
    parser.add_argument('-t', '--duration', type=int, help="Duration of summary", default=60)
    parser.add_argument('-L', '--language', help="Language of subtitles", default="english")
    parser.add_argument('-S', '--summarizer', help="Auto-summarization algorithm ("+' | '.join(SUMMARIZERS.keys())+")", default="lsa")
    parser.add_argument('-o', '--output_video', help="Output Video Summary File")
    parser.add_argument('-ot', '--output_plain_text', help="Output Plain Text Summary File")
    parser.add_argument('-oa', '--output_audio', help="Output Audio Summary File (Only the file name, file extensions, if any, will be ignored)")

    args = parser.parse_args()

    if args.summarizer not in SUMMARIZERS.keys():
        print 'Summarizer must be one of: ' + ', '.join(SUMMARIZERS.keys())
        sys.exit(1)

    summary_srt_items,plain_text_items = find_summary_regions(args.subtitles_file,
                                   summarizer=args.summarizer,
                                   duration=args.duration,
                                   language=args.language)
    summary = create_summary(args.video_file, summary_srt_items)

    video_dst = args.output_video
    if not video_dst:
        base, ext = os.path.splitext(args.video_file)
        dst = "{0}_summarized.mp4".format(base)

    audio_dst = args.output_audio
    if not audio_dst:
        base, ext = os.path.splitext(args.video_file)
        audio_dst = "{0}_summarized.m4a".format(base)
    else:
        base, ext = os.path.splitext(args.output_audio)
        audio_dst = "{0}.m4a".format(base)
        
    summary.to_videofile(
        video_dst, 
        codec="libx264", 
        temp_audiofile=audio_dst,
        remove_temp=(args.output_audio==None),
        audio_codec="aac",
    )

    plain_text_dst = args.output_plain_text
    if plain_text_dst:
        write_array_of_strings_to_file(plain_text_items,plain_text_dst)
